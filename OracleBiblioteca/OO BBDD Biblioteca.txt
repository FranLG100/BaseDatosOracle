CREATE OR REPLACE TYPE DIRECCION AS OBJECT(
calle VARCHAR2(255),
ciudad VARCHAR2(255),
codpost NUMBER(5)
);

/

create or replace TYPE USUARIO AS OBJECT(
id NUMBER,
dni VARCHAR2(255),
nombre VARCHAR2(255),
apellido VARCHAR2(255),
direccion HR.DIRECCION,
email VARCHAR2(255),
penalizado NUMBER
);

/

CREATE SEQUENCE seq_usuario
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

CREATE TABLE USUARIOS OF USUARIO(
id PRIMARY KEY
);

/

create or replace PACKAGE      "CONSULTA_USUARIOS" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_usuarios(lista_registros OUT cursor_dinamico);

END;

/

create or replace PACKAGE BODY CONSULTA_USUARIOS
IS
   PROCEDURE obtener_usuarios(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT ID,DNI,NOMBRE,APELLIDO,U.DIRECCION.CALLE,U.DIRECCION.CIUDAD,U.DIRECCION.CODPOST,EMAIL,PENALIZADO FROM USUARIOS U ORDER BY ID;
  END;
  END;

/

create or replace PACKAGE      "CONSULTA_USUARIO" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_usuario(lista_registros OUT cursor_dinamico, identificador IN NUMBER);

END;

/

create or replace PACKAGE BODY CONSULTA_USUARIO
IS
   PROCEDURE obtener_usuario(lista_registros OUT cursor_dinamico, identificador IN NUMBER) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT DNI,NOMBRE,APELLIDO,U.DIRECCION.CALLE,U.DIRECCION.CIUDAD,U.DIRECCION.CODPOST,EMAIL FROM USUARIOS U WHERE ID=identificador;
  END;
  END;

/

create or replace PROCEDURE      "INSERTAR_USUARIO" (
      dni  IN USUARIOS.dni%TYPE,
      nombre IN USUARIOS.nombre%TYPE,
      apellido IN USUARIOS.apellido%TYPE,
      calle IN USUARIOS.DIRECCION.calle%TYPE,
      ciudad IN USUARIOS.DIRECCION.ciudad%TYPE,
      zip IN USUARIOS.DIRECCION.codpost%TYPE,
      email IN USUARIOS.email%TYPE
) IS
BEGIN
    INSERT INTO USUARIOS VALUES(seq_usuario.NEXTVAL,dni,nombre,apellido,DIRECCION(calle,ciudad,zip),email,0);
END;

/

create or replace PROCEDURE      "MODIFICAR_USUARIO" (
      ndni  IN USUARIOS.dni%TYPE,
      nnombre IN USUARIOS.nombre%TYPE,
      napellido IN USUARIOS.apellido%TYPE,
      ncalle IN USUARIOS.DIRECCION.calle%TYPE,
      nciudad IN USUARIOS.DIRECCION.ciudad%TYPE,
      nzip IN USUARIOS.DIRECCION.codpost%TYPE,
      nemail IN USUARIOS.email%TYPE,
      identificador  IN USUARIOS.id%TYPE
) IS
BEGIN
    UPDATE USUARIOS U SET U.dni=ndni,U.nombre=nnombre,U.apellido=napellido,U.DIRECCION.calle=ncalle,U.DIRECCION.ciudad=nciudad,U.DIRECCION.codpost=nzip,U.email=nemail WHERE U.id=identificador;
END;

/

create or replace PROCEDURE      "BORRAR_USUARIO" (
      identificador  IN USUARIOS.id%TYPE
) IS
BEGIN
    DELETE FROM USUARIOS U WHERE U.id=identificador;
END;

/

create or replace PROCEDURE      "PERDONAR_USUARIO" (
      identificador  IN USUARIOS.id%TYPE
) IS
BEGIN
    UPDATE USUARIOS U SET U.PENALIZADO=0 WHERE U.id=identificador;
END;

/

create or replace PROCEDURE      "CASTIGAR_USUARIO" (
      identificador  IN USUARIOS.id%TYPE
) IS
BEGIN
    UPDATE USUARIOS U SET U.PENALIZADO=1 WHERE U.id=identificador;
END;

/

CREATE TABLE CLASE_LIBRO(
id NUMBER,
categoria VARCHAR2(255),
plazo NUMBER,
PRIMARY KEY(id)
);

/

CREATE OR REPLACE TYPE AUTOR AS OBJECT(
nombre VARCHAR2(255),
apellido VARCHAR2(255)
);

/

CREATE OR REPLACE TYPE LECTOR AS OBJECT(
nombre VARCHAR2(255),
apellido VARCHAR2(255),
MEMBER FUNCTION GET_LECTOR RETURN VARCHAR2
);

/

CREATE OR REPLACE TYPE BODY LECTOR AS MEMBER FUNCTION GET_LECTOR RETURN VARCHAR2
IS
BEGIN
RETURN apellido||', '||nombre;
END;
END;

/

create or replace TYPE PUBLICACION AS OBJECT(
id NUMBER,
titulo VARCHAR2(255),
autor HR.AUTOR,
disponible NUMBER
)NOT FINAL;

/

CREATE OR REPLACE TYPE LIBRO UNDER PUBLICACION(
editor VARCHAR2(255),
clase NUMBER
);

/

CREATE SEQUENCE seq_libro
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

/

CREATE TABLE LIBROS OF LIBRO(
id PRIMARY KEY,
FOREIGN KEY (clase) REFERENCES CLASE_LIBRO(id)
);

/

create or replace PACKAGE      "CONSULTA_LIBROS" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_libros(lista_registros OUT cursor_dinamico);

END;

/

create or replace PACKAGE BODY CONSULTA_LIBROS
IS
   PROCEDURE obtener_libros(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT ID,TITULO,L.AUTOR.NOMBRE,L.AUTOR.APELLIDO,EDITOR,CLASE,DISPONIBLE FROM LIBROS L ORDER BY ID;
  END;
  END;

/

create or replace PACKAGE      "CONSULTA_LIBRO" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_libro(lista_registros OUT cursor_dinamico, identificador IN NUMBER);

END;

/

create or replace PACKAGE BODY CONSULTA_LIBRO
IS
   PROCEDURE obtener_libro(lista_registros OUT cursor_dinamico, identificador IN NUMBER) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT ID,TITULO,L.AUTOR.NOMBRE,L.AUTOR.APELLIDO,EDITOR,CLASE,DISPONIBLE FROM LIBROS L WHERE ID=identificador;
  END;
  END;

/

create or replace PROCEDURE      "INSERTAR_LIBRO" (
      titulo  IN LIBROS.titulo%TYPE,
      nombre IN LIBROS.AUTOR.nombre%TYPE,
	apellido  IN LIBROS.AUTOR.apellido%TYPE,
      editor IN LIBROS.editor%TYPE,
	clase IN LIBROS.clase%TYPE
) IS
BEGIN
    INSERT INTO LIBROS VALUES(seq_libro.NEXTVAL,titulo,AUTOR(nombre,apellido),1,editor,clase);
END;

/

create or replace PROCEDURE      "MODIFICAR_LIBRO" (
      ntitulo  IN LIBROS.titulo%TYPE,
      nnombre IN LIBROS.AUTOR.nombre%TYPE,
	napellido  IN LIBROS.AUTOR.apellido%TYPE,
      neditor IN LIBROS.editor%TYPE,
	nclase IN LIBROS.clase%TYPE,
	identificador  IN LIBROS.id%TYPE
	
) IS
BEGIN
    UPDATE LIBROS L SET L.titulo=ntitulo, L.AUTOR.nombre=nnombre, L.AUTOR.apellido=napellido, L.editor=neditor, L.clase=nclase WHERE L.id=identificador;
END;

/

create or replace PROCEDURE      "BORRAR_LIBRO" (
      identificador  IN LIBROS.id%TYPE
) IS
BEGIN
    DELETE FROM LIBROS L WHERE L.id=identificador;
END;

/

create or replace PROCEDURE      "PRESTAR_LIBRO" (
      identificador  IN LIBROS.id%TYPE
) IS
BEGIN
    UPDATE LIBROS L SET L.DISPONIBLE=0 WHERE L.id=identificador;
END;

/

create or replace PROCEDURE      "DEVOLVER_LIBRO" (
      identificador  IN LIBROS.id%TYPE
) IS
BEGIN
    UPDATE LIBROS L SET L.DISPONIBLE=1 WHERE L.id=identificador;
END;

/

CREATE OR REPLACE TYPE AUDIOLIBRO UNDER PUBLICACION(
sello VARCHAR2(255),
lector HR.LECTOR
);

/

CREATE SEQUENCE seq_cds
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

/

CREATE TABLE AUDIOLIBROS OF AUDIOLIBRO(
id PRIMARY KEY
)

/

create or replace PROCEDURE      "INSERTAR_AUDIOLIBRO" (
      titulo  IN AUDIOLIBROS.titulo%TYPE,
      nombre IN AUDIOLIBROS.AUTOR.nombre%TYPE,
	apellido  IN AUDIOLIBROS.AUTOR.apellido%TYPE,
      sello IN AUDIOLIBROS.sello%TYPE,
	lnombre IN AUDIOLIBROS.LECTOR.nombre%TYPE,
	lapellido IN AUDIOLIBROS.LECTOR.apellido%TYPE
) IS
BEGIN
    INSERT INTO AUDIOLIBROS VALUES(seq_cds.NEXTVAL,titulo,AUTOR(nombre,apellido),1,sello,LECTOR(lnombre,lapellido));
END;

/

create or replace PROCEDURE      "MODIFICAR_AUDIOLIBRO" (
      ntitulo  IN AUDIOLIBROS.titulo%TYPE,
      nnombre IN AUDIOLIBROS.AUTOR.nombre%TYPE,
	napellido  IN AUDIOLIBROS.AUTOR.apellido%TYPE,
      nsello IN AUDIOLIBROS.sello%TYPE,
	nlnombre IN AUDIOLIBROS.LECTOR.nombre%TYPE,
	nlapellido IN AUDIOLIBROS.LECTOR.apellido%TYPE,
	identificador  IN AUDIOLIBROS.id%TYPE
	
) IS
BEGIN
    UPDATE AUDIOLIBROS L SET L.titulo=ntitulo, L.AUTOR.nombre=nnombre, L.AUTOR.apellido=napellido, L.sello=nsello, L.LECTOR.nombre=nlnombre, L.LECTOR.apellido=nlapellido WHERE L.id=identificador;
END;

/

create or replace PROCEDURE      "BORRAR_AUDIOLIBRO" (
      identificador  IN AUDIOLIBROS.id%TYPE
) IS
BEGIN
    DELETE FROM AUDIOLIBROS L WHERE L.id=identificador;
END;

/

create or replace PROCEDURE      "PRESTAR_AUDIOLIBRO" (
      identificador  IN AUDIOLIBROS.id%TYPE
) IS
BEGIN
    UPDATE AUDIOLIBROS L SET L.DISPONIBLE=0 WHERE L.id=identificador;
END;

/

create or replace PROCEDURE      "DEVOLVER_AUDIOLIBRO" (
      identificador  IN AUDIOLIBROS.id%TYPE
) IS
BEGIN
    UPDATE AUDIOLIBROS L SET L.DISPONIBLE=1 WHERE L.id=identificador;
END;

/

create or replace PACKAGE      "CONSULTA_AUDIOLIBROS" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_audiolibros(lista_registros OUT cursor_dinamico);

END;

/

create or replace PACKAGE BODY CONSULTA_AUDIOLIBROS
IS
   PROCEDURE obtener_audiolibros(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT A.ID,A.TITULO, A.AUTOR.NOMBRE, A.AUTOR.APELLIDO, A.SELLO, A.LECTOR.GET_LECTOR(), A.DISPONIBLE  FROM AUDIOLIBROS A ORDER BY ID;
  END;
  END;

/

create or replace PACKAGE      "CONSULTA_AUDIOLIBRO" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_audiolibro(lista_registros OUT cursor_dinamico, identificador IN NUMBER);

END;

/

create or replace PACKAGE BODY CONSULTA_AUDIOLIBRO
IS
   PROCEDURE obtener_audiolibro(lista_registros OUT cursor_dinamico, identificador IN NUMBER) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT A.TITULO, A.AUTOR.NOMBRE, A.AUTOR.APELLIDO, A.SELLO, A.LECTOR.NOMBRE, A.LECTOR.APELLIDO FROM AUDIOLIBROS A WHERE ID=identificador;
  END;
  END;

/

CREATE TABLE PRESTAMOS(
id NUMBER, 
usuario REF USUARIO SCOPE IS USUARIOS,
libro REF LIBRO SCOPE IS LIBROS,
finicio DATE,
ffin DATE,
fplazo DATE,
PRIMARY KEY(id)
)

/

CREATE SEQUENCE seq_prestamos
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

/

create or replace PACKAGE      "CONSULTA_PRESTAMOS" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_prestamos(lista_registros OUT cursor_dinamico);

END;

/

create or replace PACKAGE BODY CONSULTA_PRESTAMOS
IS
   PROCEDURE obtener_prestamos(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT ID,P.USUARIO.ID,P.LIBRO.TITULO,P.FINICIO,P.FFIN,P.FPLAZO FROM PRESTAMOS P ORDER BY P.ID;
  END;
  END;

/

create or replace PROCEDURE      "INSERTAR_PRESTAMO" (
      nusuario IN USUARIOS.id%TYPE,
	nlibro IN LIBROS.id%TYPE,
	nfinicio IN DATE,
  posibilidad OUT NUMBER
) IS
disponibilidad NUMBER;
penalizacion NUMBER;
BEGIN
SELECT L.DISPONIBLE into disponibilidad FROM LIBROS L WHERE ID=nlibro;
SELECT U.PENALIZADO into penalizacion FROM USUARIOS U WHERE ID=nusuario;
IF disponibilidad=1 AND penalizacion=0 THEN
    posibilidad:=1;
    UPDATE LIBROS SET DISPONIBLE=0 WHERE ID=nlibro;
    INSERT INTO PRESTAMOS(ID,USUARIO,LIBRO,FINICIO,FFIN,FPLAZO) SELECT seq_libro.NEXTVAL, REF(U),REF(L),nfinicio,NULL,nfinicio+(SELECT C.plazo FROM CLASE_LIBRO C JOIN LIBROS L ON L.clase=C.id WHERE L.id=nlibro) FROM USUARIOS U, LIBROS L WHERE L.ID=nlibro AND U.ID=nusuario;
ELSE
  posibilidad:=0;
  END IF;
END;

/

create or replace PROCEDURE      "BORRAR_PRESTAMO" (
      identificador  IN PRESTAMOS.id%TYPE
) IS
BEGIN
    DELETE FROM PRESTAMOS P WHERE P.id=identificador;
END;

/

create or replace PROCEDURE      "DEVOLVER_PRESTAMO" (
	nprestamo IN NUMBER,
	nffin IN DATE
) IS
finalizacion DATE;
comprobante NUMBER;
BEGIN
SELECT FPLAZO INTO finalizacion FROM PRESTAMOS WHERE PRESTAMOS.ID=nprestamo;
UPDATE PRESTAMOS SET FFIN=nffin WHERE ID=nprestamo;
UPDATE LIBROS SET DISPONIBLE=1 WHERE ID=(SELECT DEREF(LIBRO).ID FROM PRESTAMOS WHERE ID=nprestamo);
IF nffin>finalizacion THEN
if (nffin-finalizacion)>30 THEN
UPDATE USUARIOS SET PENALIZADO=30 WHERE ID=(SELECT DEREF(USUARIO).ID FROM PRESTAMOS WHERE ID=nprestamo);
ELSE
UPDATE USUARIOS SET PENALIZADO=penalizado+(nffin-finalizacion) WHERE ID=(SELECT DEREF(USUARIO).ID FROM PRESTAMOS WHERE ID=nprestamo);
END IF;
END IF;
SELECT PENALIZADO INTO comprobante FROM USUARIOS WHERE ID=(SELECT DEREF(USUARIO).ID FROM PRESTAMOS WHERE ID=nprestamo);
IF comprobante>30 THEN
UPDATE USUARIOS SET PENALIZADO=30 WHERE ID=(SELECT DEREF(USUARIO).ID FROM PRESTAMOS WHERE ID=nprestamo);
END IF;
END;

/

CREATE TABLE HISTORICOS(
id NUMBER,
usuario HR.USUARIO,
libro HR.LIBRO,
finicio DATE,
ffin DATE,
fplazo DATE,
PRIMARY KEY(id)
)

/

CREATE SEQUENCE seq_historicos
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

/

create or replace TRIGGER INSERTAR_HISTORICOS BEFORE DELETE ON PRESTAMOS FOR EACH ROW
BEGIN
INSERT INTO HISTORICOS VALUES(seq_historicos.NEXTVAL,DEREF(:old.USUARIO),DEREF(:old.LIBRO),:old.finicio,:old.ffin,:old.fplazo);
END;

/

create or replace PACKAGE      "CONSULTA_HISTORICOS" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_historicos(lista_registros OUT cursor_dinamico);

END;

/

create or replace PACKAGE BODY CONSULTA_HISTORICOS
IS
   PROCEDURE obtener_historicos(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT ID,H.USUARIO.DNI, H.USUARIO.NOMBRE, H.USUARIO.APELLIDO,H.LIBRO.TITULO, H.LIBRO.AUTOR.NOMBRE, H.LIBRO.AUTOR.APELLIDO, H.FINICIO,H.FFIN,H.FPLAZO FROM HISTORICOS H ORDER BY ID;
  END;
  END;

/

CREATE TABLE PRESTAMOS_AUDIOLIBROS(
id NUMBER, 
usuario REF USUARIO SCOPE IS USUARIOS,
audiolibro REF AUDIOLIBRO SCOPE IS AUDIOLIBROS,
finicio DATE,
ffin DATE,
fplazo DATE,
PRIMARY KEY(id)
)

/

CREATE SEQUENCE seq_prestamos_audiolibros
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

/

create or replace PACKAGE      "CONSULTA_PRESTAMOS_AUDIOLIBROS" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_prestamos_audiolibros(lista_registros OUT cursor_dinamico);

END;

/

create or replace PACKAGE BODY CONSULTA_PRESTAMOS_AUDIOLIBROS
IS
   PROCEDURE obtener_prestamos_audiolibros(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT ID,P.USUARIO.ID,P.AUDIOLIBRO.TITULO,P.FINICIO,P.FFIN,P.FPLAZO FROM PRESTAMOS_AUDIOLIBROS P ORDER BY P.ID;
  END;
  END;

/

create or replace PROCEDURE      "INSERTAR_PRESTAMO_AUDIOLIBRO" (
      nusuario IN USUARIOS.id%TYPE,
	naudiolibro IN AUDIOLIBROS.id%TYPE,
	nfinicio IN DATE,
  posibilidad OUT NUMBER
) IS
disponibilidad NUMBER;
penalizacion NUMBER;
BEGIN
SELECT L.DISPONIBLE into disponibilidad FROM AUDIOLIBROS L WHERE ID=naudiolibro;
SELECT U.PENALIZADO into penalizacion FROM USUARIOS U WHERE ID=nusuario;
IF disponibilidad=1 AND penalizacion=0 THEN
    posibilidad:=1;
    UPDATE AUDIOLIBROS SET DISPONIBLE=0 WHERE ID=naudiolibro;
    INSERT INTO PRESTAMOS_AUDIOLIBROS(ID,USUARIO,AUDIOLIBRO,FINICIO,FFIN,FPLAZO) SELECT seq_prestamos_audiolibros.NEXTVAL, REF(U),REF(L),nfinicio,NULL,nfinicio+7 FROM USUARIOS U, AUDIOLIBROS L WHERE L.ID=naudiolibro AND U.ID=nusuario;
ELSE
  posibilidad:=0;
  END IF;
END;

/

create or replace PROCEDURE      "BORRAR_PRESTAMO_AUDIOLIBRO" (
      identificador  IN PRESTAMOS_AUDIOLIBROS.id%TYPE
) IS
BEGIN
    DELETE FROM PRESTAMOS_AUDIOLIBROS P WHERE P.id=identificador;
END;

/

create or replace PROCEDURE      "DEVOLVER_PRESTAMO_AUDIOLIBRO" (
	nprestamo IN NUMBER,
	nffin IN DATE
) IS
finalizacion DATE;
comprobante NUMBER;
BEGIN
SELECT FPLAZO INTO finalizacion FROM PRESTAMOS_AUDIOLIBROS WHERE PRESTAMOS_AUDIOLIBROS.ID=nprestamo;
UPDATE PRESTAMOS_AUDIOLIBROS SET FFIN=nffin WHERE ID=nprestamo;
UPDATE AUDIOLIBROS SET DISPONIBLE=1 WHERE ID=(SELECT DEREF(AUDIOLIBRO).ID FROM PRESTAMOS_AUDIOLIBROS WHERE ID=nprestamo);
IF nffin>finalizacion THEN
if (nffin-finalizacion)>30 THEN
UPDATE USUARIOS SET PENALIZADO=30 WHERE ID=(SELECT DEREF(USUARIO).ID FROM PRESTAMOS_AUDIOLIBROS WHERE ID=nprestamo);
ELSE
UPDATE USUARIOS SET PENALIZADO=penalizado+(nffin-finalizacion) WHERE ID=(SELECT DEREF(USUARIO).ID FROM PRESTAMOS_AUDIOLIBROS WHERE ID=nprestamo);
END IF;
END IF;
SELECT PENALIZADO INTO comprobante FROM USUARIOS WHERE ID=(SELECT DEREF(USUARIO).ID FROM PRESTAMOS_AUDIOLIBROS WHERE ID=nprestamo);
IF comprobante>30 THEN
UPDATE USUARIOS SET PENALIZADO=30 WHERE ID=(SELECT DEREF(USUARIO).ID FROM PRESTAMOS_AUDIOLIBROS WHERE ID=nprestamo);
END IF;
END;

/

CREATE TABLE HISTORICOS_AUDIOLIBROS(
id NUMBER,
usuario HR.USUARIO,
audiolibro HR.AUDIOLIBRO,
finicio DATE,
ffin DATE,
fplazo DATE,
PRIMARY KEY(id)
)

/

CREATE SEQUENCE seq_historicosa
   MINVALUE 1
   START WITH 1
   INCREMENT BY 1;

/

create or replace TRIGGER INSERTAR_HISTORICOS_AUDIOLIBRO BEFORE DELETE ON PRESTAMOS_AUDIOLIBROS FOR EACH ROW
BEGIN
INSERT INTO HISTORICOS_AUDIOLIBROS VALUES(seq_historicosa.NEXTVAL,DEREF(:old.USUARIO),DEREF(:old.AUDIOLIBRO),:old.finicio,:old.ffin,:old.fplazo);
END;

/

create or replace PACKAGE      "CONSULTA_HISTORICOS_A" 
AS

    TYPE cursor_dinamico IS REF CURSOR;
    PROCEDURE obtener_historicosa(lista_registros OUT cursor_dinamico);

END;

/

create or replace PACKAGE BODY CONSULTA_HISTORICOS_A
IS
   PROCEDURE obtener_historicosa(lista_registros OUT cursor_dinamico) IS 
    BEGIN      
        OPEN lista_registros FOR 
        SELECT ID,H.USUARIO.DNI, H.USUARIO.NOMBRE, H.USUARIO.APELLIDO,H.AUDIOLIBRO.TITULO, H.AUDIOLIBRO.AUTOR.NOMBRE, H.AUDIOLIBRO.AUTOR.APELLIDO, H.FINICIO,H.FFIN,H.FPLAZO FROM HISTORICOS_AUDIOLIBROS H ORDER BY ID;
  END;
  END;

/

create or replace PROCEDURE      "REBAJAR_CASTIGO"  IS
BEGIN
UPDATE USUARIOS SET PENALIZADO=PENALIZADO-1 WHERE PENALIZADO<>0;
END;

/



--INSERT INTO PRESTAMOS(ID,USUARIO,LIBRO,FINICIO,FFIN,FPLAZO) SELECT seq_libro.NEXTVAL, REF(U),REF(L),'13/10/19',NULL,'20/10/19' FROM USUARIOS U, LIBROS L WHERE L.ID=1 AND U.ID=26;

--SELECT ID,P.USUARIO.NOMBRE,P.USUARIO.APELLIDO,P.LIBRO.TITULO,P.FINICIO,P.FFIN,P.FPLAZO FROM PRESTAMOS P;

--SELECT A.LECTOR.GET_LECTOR() FROM AUDIOLIBROS A WHERE ID=1;
